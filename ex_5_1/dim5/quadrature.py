# ruff: noqa: N806
import numpy as np
import torch
from numpy.polynomial.hermite import hermgauss
from numpy.polynomial.laguerre import laggauss


def quadrature_1d(n_points, dtype=torch.double, device="cpu"):
    """
    计算域[-1,1]上一维高斯-勒让德积分规则的积分点和权重.

    高斯-勒让德积分是一种高精度的数值积分方法, 能够精确积分次数不超过2*n_points-1的多项式.
    该函数返回标准区间[-1,1]上的积分点和对应的权重.

    参数:
        n_points (int): 域[-1,1]上的积分点数量, 支持1到16个积分点
        dtype (torch.dtype, optional): 数据类型, 默认为torch.double
        device (str, optional): 计算设备, 默认为"cpu"

    返回:
        tuple: 包含两个torch.Tensor的元组
            - 积分点: 形状为[n_points]的张量, 包含n_points个积分点的坐标
            - 积分权重: 形状为[n_points]的张量, 包含对应的积分权重

    异常:
        ValueError: 当n_points不在支持的范围内时抛出

    示例:
        >>> x, w = quadrature_1d(3)
        >>> print(x.shape, w.shape)
        torch.Size([3]) torch.Size([3])
    """
    # 高斯-勒让德积分点和权重的预计算表
    gauss_legendre_data = {
        1: [[0, 2]],
        2: [[-np.sqrt(3) / 3, 1], [np.sqrt(3) / 3, 1]],
        3: [[-np.sqrt(15) / 5, 5 / 9], [0, 8 / 9], [np.sqrt(15) / 5, 5 / 9]],
        4: [
            [-np.sqrt((3 + 2 * np.sqrt(6 / 5)) / 7), (18 - np.sqrt(30)) / 36],
            [-np.sqrt((3 - 2 * np.sqrt(6 / 5)) / 7), (18 + np.sqrt(30)) / 36],
            [np.sqrt((3 - 2 * np.sqrt(6 / 5)) / 7), (18 + np.sqrt(30)) / 36],
            [np.sqrt((3 + 2 * np.sqrt(6 / 5)) / 7), (18 - np.sqrt(30)) / 36],
        ],
        5: [
            [
                -1 / 3 * np.sqrt(5 + 2 * np.sqrt(10 / 7)),
                (322 - 13 * np.sqrt(70)) / 900,
            ],
            [
                -1 / 3 * np.sqrt(5 - 2 * np.sqrt(10 / 7)),
                (322 + 13 * np.sqrt(70)) / 900,
            ],
            [0, 128 / 225],
            [
                1 / 3 * np.sqrt(5 - 2 * np.sqrt(10 / 7)),
                (322 + 13 * np.sqrt(70)) / 900,
            ],
            [
                1 / 3 * np.sqrt(5 + 2 * np.sqrt(10 / 7)),
                (322 - 13 * np.sqrt(70)) / 900,
            ],
        ],
        6: [
            [-0.932469514203152, 0.171324492379170],
            [-0.661209386466264, 0.360761573048139],
            [-0.238619186083197, 0.467913934572691],
            [0.238619186083197, 0.467913934572691],
            [0.661209386466264, 0.360761573048139],
            [0.932469514203152, 0.171324492379170],
        ],
        7: [
            [-0.949107912342758, 0.129484966168870],
            [-0.741531185599394, 0.279705391489277],
            [-0.405845151377397, 0.381830050505119],
            [0, 0.417959183673469],
            [0.405845151377397, 0.381830050505119],
            [0.741531185599394, 0.279705391489277],
            [0.949107912342758, 0.129484966168870],
        ],
        8: [
            [-0.960289856497536, 0.101228536290377],
            [-0.796666477413627, 0.222381034453374],
            [-0.525532409916329, 0.313706645877887],
            [-0.183434642495650, 0.362683783378362],
            [0.183434642495650, 0.362683783378362],
            [0.525532409916329, 0.313706645877887],
            [0.796666477413627, 0.222381034453374],
            [0.960289856497536, 0.101228536290377],
        ],
        9: [
            [-0.968160239507626, 0.0812743883615744],
            [-0.836031107326636, 0.180648160694858],
            [-0.613371432700590, 0.260610696402936],
            [-0.324253423403809, 0.312347077040003],
            [0.0, 0.330239355001260],
            [0.324253423403809, 0.312347077040003],
            [0.613371432700590, 0.260610696402936],
            [0.836031107326636, 0.180648160694858],
            [0.968160239507626, 0.0812743883615744],
        ],
        10: [
            [-0.973906528517172, 0.0666713443086881],
            [-0.865063366688985, 0.149451349150581],
            [-0.679409568299024, 0.219086362515982],
            [-0.433395394129247, 0.269266719309997],
            [-0.148874338981631, 0.295524224714753],
            [0.148874338981631, 0.295524224714753],
            [0.433395394129247, 0.269266719309997],
            [0.679409568299024, 0.219086362515982],
            [0.865063366688985, 0.149451349150581],
            [0.973906528517172, 0.0666713443086881],
        ],
        11: [
            [-0.978228658146057, 0.0556685671161737],
            [-0.887062599768095, 0.125580369464904],
            [-0.730152005574049, 0.186290210927734],
            [-0.519096129206812, 0.233193764591991],
            [-0.269543155952345, 0.262804544510247],
            [0.0, 0.272925086777901],
            [0.269543155952345, 0.262804544510247],
            [0.519096129206812, 0.233193764591991],
            [0.730152005574049, 0.186290210927734],
            [0.887062599768095, 0.125580369464904],
            [0.978228658146057, 0.0556685671161737],
        ],
        12: [
            [-0.981560634246719, 0.0471753363865118],
            [-0.904117256370475, 0.106939325995318],
            [-0.769902674194305, 0.160078328543345],
            [-0.587317954286617, 0.203167426723066],
            [-0.367831498998180, 0.233492536538356],
            [-0.125233408511469, 0.249147045813403],
            [0.125233408511469, 0.249147045813403],
            [0.367831498998180, 0.233492536538356],
            [0.587317954286617, 0.203167426723066],
            [0.769902674194305, 0.160078328543345],
            [0.904117256370475, 0.106939325995318],
            [0.981560634246719, 0.0471753363865118],
        ],
        13: [
            [-0.984183054718588, 0.0404840047653159],
            [-0.917598399222978, 0.0921214998377285],
            [-0.801578090733310, 0.138873510219789],
            [-0.642349339440340, 0.178145980761946],
            [-0.448492751036447, 0.207816047536889],
            [-0.230458315955135, 0.226283180262898],
            [0.0, 0.232551553230874],
            [0.230458315955135, 0.226283180262898],
            [0.448492751036447, 0.207816047536889],
            [0.642349339440340, 0.178145980761946],
            [0.801578090733310, 0.138873510219789],
            [0.917598399222978, 0.0921214998377285],
            [0.984183054718588, 0.0404840047653159],
        ],
        14: [
            [-0.986283808696812, 0.0351194603317519],
            [-0.928434883663574, 0.0801580871597603],
            [-0.827201315069765, 0.121518570687902],
            [-0.687292904811685, 0.157203167158193],
            [-0.515248636358154, 0.185538397477937],
            [-0.319112368927890, 0.205198463721295],
            [-0.108054948707344, 0.215263853463158],
            [0.108054948707344, 0.215263853463158],
            [0.319112368927890, 0.205198463721295],
            [0.515248636358154, 0.185538397477937],
            [0.687292904811685, 0.157203167158193],
            [0.827201315069765, 0.121518570687902],
            [0.928434883663574, 0.0801580871597603],
            [0.986283808696812, 0.0351194603317519],
        ],
        15: [
            [-0.987992518020485, 0.0307532419961174],
            [-0.937273392400706, 0.0703660474881081],
            [-0.848206583410427, 0.107159220467172],
            [-0.724417731360170, 0.139570677926155],
            [-0.570972172608539, 0.166269205816993],
            [-0.394151347077563, 0.186161000015562],
            [-0.201194093997435, 0.198431485327112],
            [0.0, 0.202578241925561],
            [0.201194093997435, 0.198431485327112],
            [0.394151347077563, 0.186161000015562],
            [0.570972172608539, 0.166269205816993],
            [0.724417731360170, 0.139570677926155],
            [0.848206583410427, 0.107159220467172],
            [0.937273392400706, 0.0703660474881081],
            [0.987992518020485, 0.0307532419961174],
        ],
        16: [
            [-0.989400934991650, 0.0271524594117540],
            [-0.944575023073233, 0.0622535239386481],
            [-0.865631202387832, 0.0951585116824914],
            [-0.755404408355003, 0.124628971255535],
            [-0.617876244402644, 0.149595988816578],
            [-0.458016777657227, 0.169156519395002],
            [-0.281603550779259, 0.182603415044923],
            [-0.0950125098376374, 0.189450610455069],
            [0.0950125098376374, 0.189450610455069],
            [0.281603550779259, 0.182603415044923],
            [0.458016777657227, 0.169156519395002],
            [0.617876244402644, 0.149595988816578],
            [0.755404408355003, 0.124628971255535],
            [0.865631202387832, 0.0951585116824914],
            [0.944575023073233, 0.0622535239386481],
            [0.989400934991650, 0.0271524594117540],
        ],
    }

    if n_points not in gauss_legendre_data:
        raise ValueError("此积分方案暂未实现!")

    coord = torch.tensor(
        gauss_legendre_data[n_points], dtype=dtype, device=device
    )
    return coord[:, 0], coord[:, 1]


def composite_quadrature_1d(
    n_points, interval, n_subintervals, dtype=torch.double, device="cpu"
):
    """
    一维复合高斯-勒让德积分规则的积分点和积分权重,
    将积分域[a,b]划分为n_subintervals个相等的子区间, 并在每个子区间中使用n_points个积分点.

    参数:
        n_points: 每个子区间中的积分点数量
        interval: 积分域, 格式为(a, b)的元组
        n_subintervals: [a,b]划分的子区间数量
        dtype, device: 数据类型和设备
    返回:
        x (Tensor): 积分点, shape为 [n_points * n_subintervals]
        w (Tensor): 积分权重, shape为 [n_points * n_subintervals]
    """
    # 提取积分区间的左右端点
    a, b = interval
    # 计算每个子区间的长度
    h = torch.tensor((b - a) / n_subintervals, dtype=dtype, device=device)
    # 获取标准区间[-1,1]上的高斯-勒让德积分点和权重
    x, w = quadrature_1d(n_points, dtype, device)

    # 将积分点从标准区间[-1,1]变换到各个子区间
    # 生成所有子区间的左端点
    subinterval_starts = torch.linspace(
        a, b - h, n_subintervals, dtype=dtype, device=device
    )

    # 将标准积分点变换到[0,h]区间
    x_normalized = (x + 1) * h / 2

    # 使用广播机制生成所有子区间的积分点
    x = (x_normalized.unsqueeze(0) + subinterval_starts.unsqueeze(1)).flatten()

    # 将权重重复n_subintervals次以对应所有子区间的积分点
    w = (w * h / 2).repeat(n_subintervals)

    return x, w


def composite_quadrature_2d(
    n_points,
    interval1,
    interval2,
    n_subintervals1,
    n_subintervals2,
    dtype=torch.double,
    device="cpu",
):
    """
    二维张量高斯-勒让德积分规则的积分点和积分权重,
    对于[a1,b1]*[a2,b2], 将域[a1,b1]和[a2,b2]分别划分为n_subintervals1和n_subintervals2个相等的子区间,
    并在一维子区间中使用n_points个积分点来获得张量积分规则.

    参数:
        n_points: 一维每个子区间中的积分点数量
        interval1: 第一维积分域, 格式为(a1, b1)的元组
        interval2: 第二维积分域, 格式为(a2, b2)的元组
        n_subintervals1: [a1,b1]划分的子区间数量
        n_subintervals2: [a2,b2]划分的子区间数量
        dtype, device: 数据类型和设备
    返回:
        X (Tensor): 积分点, shape为 [n_points^2 * n_subintervals1 * n_subintervals2, 2]
            每行代表该积分点的坐标, 为 (在interval1中的坐标, 在interval2中的坐标)
            排列顺序是: (interval1中第1个点, interval2中第1个点)
                      (interval1中第2个点, interval2中第1个点)
                      (interval1中第3个点, interval2中第1个点)
                      ...
        W (Tensor): 积分权重, shape为 [n_points^2 * n_subintervals1 * n_subintervals2]
    """
    p1, w1 = composite_quadrature_1d(
        n_points, interval1, n_subintervals1, dtype=dtype, device=device
    )
    p2, w2 = composite_quadrature_1d(
        n_points, interval2, n_subintervals2, dtype=dtype, device=device
    )

    P2, P1 = torch.meshgrid(p2, p1, indexing="ij")
    W2, W1 = torch.meshgrid(w2, w1, indexing="ij")

    # 展平并组合
    points = torch.stack((P1.flatten(), P2.flatten()), dim=1)
    weights = (W1 * W2).flatten()

    return points, weights


# ******************** 无界域 ********************
# === 埃尔米特-高斯规则 ===
def hermite_gauss_quad(k, dtype=torch.double, device="cpu", modified=True):
    x, w = hermgauss(k)
    if modified:
        w = w * np.exp(x**2)
    return torch.from_numpy(x).to(dtype).to(device), torch.from_numpy(w).to(
        dtype
    ).to(device)


# === 拉盖尔-高斯规则 ===
def laguerre_gauss_quad(k, dtype=torch.double, device="cpu", modified=True):
    x, w = laggauss(k)
    if modified:
        w = w * np.exp(x)
    return torch.from_numpy(x).to(dtype).to(device), torch.from_numpy(w).to(
        dtype
    ).to(device)


def laguerre_gauss_quad2d(n, dtype=torch.double, device="cpu", modified=True):
    x, w = laggauss(n)
    if modified:
        w = w * np.exp(x)
    x = torch.from_numpy(x).to(dtype).to(device)
    w = torch.from_numpy(w).to(dtype).to(device)

    # 使用meshgrid生成张量积分点和权重
    X2, X1 = torch.meshgrid(x, x, indexing="ij")
    W2, W1 = torch.meshgrid(w, w, indexing="ij")

    # 展平并组合
    points = torch.stack((X1.flatten(), X2.flatten()), dim=1)
    weights = (W1 * W2).flatten()

    return points, weights


# === 拉盖尔-高斯-拉道规则 ===
def laguerre_gauss_radau(dtype=torch.double, device="cpu"):
    coord = torch.tensor(
        [
            [0.000000000000000e00, 5.882352941176471e-02],
            [2.161403052394536e-01, 2.927604493268249e-01],
            [7.263882432518047e-01, 3.181362909815314e-01],
            [1.533593160373541e00, 2.066607692008763e-01],
            [2.644970998611911e00, 8.994208934619415e-02],
            [4.070978160880192e00, 2.708753007297033e-02],
            [5.825855515105604e00, 5.679781839868921e-03],
            [7.928504185306668e00, 8.230703112809221e-04],
            [1.040380828995104e01, 8.100028502120838e-05],
            [1.328466107070703e01, 5.266367668946434e-06],
            [1.661517321686662e01, 2.173968333033556e-07],
            [2.045600602002722e01, 5.384928271901132e-09],
            [2.489384702535191e01, 7.374041106876865e-11],
            [3.005986292020259e01, 4.928461815736925e-13],
            [3.617069454367918e01, 1.309028045707531e-15],
            [4.364036518417683e01, 9.358643168465394e-19],
            [5.352915116026845e01, 6.770058713668848e-23],
        ],
        dtype=dtype,
        device=device,
    )
    return coord[:, 0], coord[:, 1]


def laguerre_gauss_radau2d(dtype=torch.double, device="cpu"):
    x, w = laguerre_gauss_radau(dtype=dtype, device=device)

    # 使用meshgrid生成张量积分点和权重
    X2, X1 = torch.meshgrid(x, x, indexing="ij")
    W2, W1 = torch.meshgrid(w, w, indexing="ij")

    # 展平并组合
    points = torch.stack((X1.flatten(), X2.flatten()), dim=1)
    weights = (W1 * W2).flatten()

    return points, weights


def main():
    pass


if __name__ == "__main__":
    main()
